---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: Terraform AWS Cloudwatch Alarms

# License of this project
license: "APACHE"

# Canonical GitHub repo
github_repo: clouddrove/terraform-aws-cloudwatch-alarms

# Badges to display
badges:
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/clouddrove/terraform-aws-cloudwatch-alarms.svg"
    url: "https://github.com/clouddrove/terraform-aws-cloudwatch-alarms/releases/latest"
  - name: "tfsec"
    image: "https://github.com/clouddrove/terraform-aws-cloudwatch-alarms/actions/workflows/tfsec.yml/badge.svg"
    url: "https://github.com/clouddrove/terraform-aws-cloudwatch-alarms/actions/workflows/tfsec.yml"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-APACHE-blue.svg"
    url: "LICENSE.md"
  - name: "Changelog"
    image: "https://img.shields.io/badge/Changelog-blue"
    url: "CHANGELOG.md"

prerequesties:
  - name: Terraform
    url: https://learn.hashicorp.com/terraform/getting-started/install.html
    version: ">= 1.6.6"

providers:
  - name: aws
    url: https://aws.amazon.com/
    version: ">= 5.29.0"

module_dependencies:
  - name: Labels Module
    url: https://github.com/clouddrove/terraform-aws-labels
    description: Provides resource tagging.

#  description of this project
description: |-
  Terraform module creates Cloudwatch Alarm on AWS for monitoriing AWS services.

# How to use this project
# yamllint disable rule:line-length
usage: |-
  Here are some examples of how you can use this module in your inventory structure:
  ### Basic Example
  ```hcl
      module "alarm" {
        source                    = "clouddrove/cloudwatch-alarms/aws"
        version                   = "2.0.0"
        name        = "alarm"
        environment = "test"
        label_order = ["name", "environment"]
      
      
        alarm_name          = "cpu-alarm"
        comparison_operator = "GreaterThanOrEqualToThreshold"
        evaluation_periods  = 2
        metric_name         = "CPUUtilization"
        namespace           = "AWS/EC2"
        period              = 60
        statistic           = "Average"
        threshold           = 40
        alarm_description   = "This metric monitors ec2 cpu utilization"
        alarm_actions       = []
      
        actions_enabled           = true
        insufficient_data_actions = []
        ok_actions                = []
        treat_missing_data        = "ignore"
        dimensions = {
          instance_id = module.ec2.instance_id[0]
        }

    }
  ```

  ### Anomaly Example
  ```hcl
      module "alarm" {
        source                    = "clouddrove/cloudwatch-alarms/aws"
        version                   = "2.0.0"
        name        = "alarm"
        environment = "test"
        label_order = ["name", "environment"]
      
        alarm_name          = "cpu-alarm"
        comparison_operator = "GreaterThanUpperThreshold"
        evaluation_periods  = 2
        threshold_metric_id = "e1"
        query_expressions = [{
          id          = "e1"
          expression  = "ANOMALY_DETECTION_BAND(m1)"
          label       = "CPUUtilization (Expected)"
          return_data = "true"
        }]
        query_metrics = [{
          id          = "m1"
          return_data = "true"
          metric_name = "CPUUtilization"
          namespace   = "AWS/EC2"
          period      = "120"
          stat        = "Average"
          unit        = "Count"
          dimensions = {
            InstanceId = module.ec2.instance_id[0]
          }
        }]
        alarm_description = "This metric monitors ec2 cpu utilization"
        alarm_actions     = []
      
        actions_enabled           = true
        insufficient_data_actions = []
        ok_actions                = []
      }
  ```

  ### Epression Example
  ```hcl
      module "alarm" {
        source                    = "clouddrove/cloudwatch-alarms/aws"
        version                   = "2.0.0"
        name        = "alarm"
        environment = "test"
        label_order = ["name", "environment"]
            
        expression_enabled  = true
        alarm_name          = "cpu-alarm"
        comparison_operator = "GreaterThanOrEqualToThreshold"
        evaluation_periods  = 2
        threshold           = 40
        query_expressions = [{
          id          = "e1"
          expression  = "m2/m1*100"
          label       = "Error Rate"
          return_data = "true"
        }]
        query_metrics = [
          {
            id          = "m1"
            metric_name = "RequestCount"
            namespace   = "AWS/ApplicationELB"
            period      = "120"
            stat        = "Sum"
            unit        = "Count"
            return_data = null
            dimensions = {
              LoadBalancer = "app/web"
            }
            }, {
            id          = "m2"
            metric_name = "HTTPCode_ELB_5XX_Count"
            namespace   = "AWS/ApplicationELB"
            period      = "120"
            stat        = "Sum"
            unit        = "Count"
            return_data = null
            dimensions = {
              LoadBalancer = "app/web"
            }
        }]
        alarm_description = "This metric monitors ec2 cpu utilization"
        alarm_actions     = []
      
        actions_enabled           = true
        insufficient_data_actions = []
        ok_actions                = []
      }
  ```
